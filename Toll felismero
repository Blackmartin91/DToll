from keras.preprocessing.image import img_to_array
from keras.models import load_model
from imutils.video import VideoStream
from threading import Thread
import numpy as np
import imutils
import time
import cv2
import os
import requests
import json

#mqtt light flag
LIGHT = 0;

#api-endpoint
URL = "http://(ip adress)/mqtt"

#defining a params dict for the paramters to be sent to the API
PARAMS = {'light':LIGHT}

# define the paths to the Not Pen Keras deep learning model
MODEL_PATH = "pen_not_pen.model"
 
# initialize the total number of frames that *consecutively* contain
# a pen along with threshold required to trigger the pen alarm
TOTAL_CONSEC = 0
TOTAL_THRESH = 20
 
# initialize is the pen alarm has been triggered
PEN = False

# load the model
print("[INFO] loading model...")
model = load_model(MODEL_PATH)

# initialize the video stream and allow the camera sensor to warm up
print("[INFO] starting video stream...")
vs = VideoStream(src=0).start()
# vs = VideoStream(usePiCamera=True).start()
time.sleep(2.0)

# loop over the frames from the video stream
while True:
    # grab the frame from the threaded video stream and resize it
    # to have a maximum width of 400 pixels
    frame = vs.read()
    frame = imutils.resize(frame, width=400)

    # prepare the image to be classified by our deep learning network
    image = cv2.resize(frame, (28, 28))
    image = image.astype("float") / 255.0
    image = img_to_array(image)
    image = np.expand_dims(image, axis=0)
 
    # classify the input image and initialize the label and
    # probability of the prediction
    (notPen, pen) = model.predict(image)[0]
    label = "Not Pen"
    proba = notPen

    # check to see if pen was detected using our convolutional
    # neural network
    if pen > notPen:
        # update the label and prediction probability
        label = "Pen"
        proba = pen
 
        # increment the total number of consecutive frames that
        # contain a pen
        TOTAL_CONSEC += 1

        # check to see if we should raise the pen alarm
        if not PEN and TOTAL_CONSEC >= TOTAL_THRESH:
            # indicate that pen has been found
            PEN = True
            #send http post request and save response 
            #response = requests.post(url = URL, params = PARAMS)
            #check if server response
            #if response.json().['Status'] != 200:
                #print('Error: can\'t connect to server')
 
    # otherwise, reset the total number of consecutive frames and the
    # pen alarm
    else:
        TOTAL_CONSEC = 0
        PEN = False

    # build the label and draw it on the frame
    label = "{}: {:.2f}%".format(label, proba * 100)
    frame = cv2.putText(frame, label, (10, 25),
        cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 255, 0), 2)
 
    # show the output frame
    cv2.imshow("Frame", frame)
    key = cv2.waitKey(1) & 0xFF
 
    # if the `q` key was pressed, break from the loop
    if key == ord("q"):
        break
 
# do a bit of cleanup
print("[INFO] cleaning up...")
cv2.destroyAllWindows()
vs.stop()
